 public interface IInvoiceRepository
  {
      decimal? GetTotal(int invoiceId);

      decimal GetTotalOfUnpaid();

      IReadOnlyDictionary<string, long> GetItemsReport(DateTime? from, DateTime? to);
  }
  
  public class InvoiceItem
  {
      // A name of an item e.g. eggs.
      public string Name { get; set; }
      // A number of bought items e.g. 10.

      public int Count { get; set; }
      // A price of an item e.g. 20.5.
      public decimal Price { get; set; }
  }
  
   public class Invoice
    {
        // A unique numerical identifier of an invoice (mandatory)
        public int Id { get; set; }
        // A short description of an invoice (optional).
        public string Description { get; set; }
        // A number of an invoice e.g. 134/10/2018 (mandatory).
        public string Number { get; set; }
        // An issuer of an invoice e.g. Metz-Anderson, 600  Hickman Street,Illinois (mandatory).
        public string Seller { get; set; }
        // A buyer of a service or a product e.g. John Smith, 4285  Deercove Drive, Dallas (mandatory).
        public string Buyer { get; set; }
        // A date when an invoice was issued (mandatory).
        public DateTime CreationDate { get; set; }
        // A date when an invoice was paid (optional).
        public DateTime? AcceptanceDate { get; set; }
        // A collection of invoice items for a given invoice (can be empty but is never null).
        public IList<InvoiceItem> InvoiceItems { get; }

        public Invoice()
        {
            InvoiceItems = new List<InvoiceItem>();
        }
    }
    
    
    
    public class InvoiceRepository : IInvoiceRepository
    {
        private IQueryable<Invoice> _invoices;

        public InvoiceRepository(IQueryable<Invoice> invoices)
        {
            _invoices = invoices ?? throw new ArgumentNullException(nameof(invoices));
        }

        /// <summary>
        /// Should return a total value of an invoice with a given id. If an invoice does not exist null should be returned.
        /// </summary>
        /// <param name="invoiceId"></param>
        /// <returns></returns>
        public decimal? GetTotal(int invoiceId)
        {
            if (!_invoices.Any())
            {
                return null;
            }
            var invoiceResult = _invoices.Where(i => i.Id == invoiceId);
            if (invoiceResult == null || !invoiceResult.Any())
            {
                return null;
            }
            var invoice = invoiceResult.First();
            if (!invoice.InvoiceItems.Any())
            {
                return null;
            }

            return invoice.InvoiceItems.Sum(item => item.Price * item.Count);

        }

        /// <summary>
        /// Should return a total value of all unpaid invoices.
        /// </summary>
        /// <returns></returns>
        public decimal GetTotalOfUnpaid()
        {
            if (!_invoices.Any())
            {
                return 0.00m;
            }

            var unpaidInvoices = _invoices.Where(i => i.AcceptanceDate == null);
            if (unpaidInvoices.Any())
            {
                return unpaidInvoices.Sum(invoice => invoice.InvoiceItems.Sum(item => item.Price * item.Count));
            }

            return 0.00m;



        }

        /// <summary>
        /// Should return a dictionary where the name of an invoice item is a key and the number of bought items is a value.
        /// The number of bought items should be summed within a given period of time (from, to). Both the from date and the end date can be null.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public IReadOnlyDictionary<string, long> GetItemsReport(DateTime? from, DateTime? to)
        {
            var boughtItemDic = new Dictionary<string, long>();

            if (_invoices.Any())
            {
                var invoices = _invoices.Where(i => (from.HasValue ? i.CreationDate >= from.Value : true) && (to.HasValue ? i.CreationDate <= to.Value : true));
                if (invoices.Any())
                {
                    var allInvoicesItems = invoices.SelectMany(invoice => invoice.InvoiceItems);
                    if (allInvoicesItems.Any())
                    {
                        var buyItems = allInvoicesItems.GroupBy(item => item.Name).Select(
                                                                        g => new {
                                                                            itemName = g.Key.ToString(),
                                                                            itemCount = g.Sum(item => item.Count)
                                                                             });

                        buyItems.ToList().ForEach(b => boughtItemDic.Add(b.itemName, b.itemCount));
                    }


                }
                
            }

            return boughtItemDic;
        }
    }
    
    
    
